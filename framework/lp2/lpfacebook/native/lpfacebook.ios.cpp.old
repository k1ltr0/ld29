

//.h
class lpFacebookBase;

#import <FacebookSDK/FacebookSDK.h>

//.cpp

// header


# pragma mark - Facebook List definition
class n_lpFacebookList;
class n_lpFacebookNode;
class n_lpFacebookEnumerator;
class n_lpFacebookHeadNode;
class lpFacebookUser;

// c_node7
class n_lpFacebookNode : public Object{
public:
    n_lpFacebookNode* m__succ;
    n_lpFacebookNode* m__pred;
    lpFacebookUser* m__data;
    n_lpFacebookNode();
    n_lpFacebookNode* m_new(n_lpFacebookNode*,n_lpFacebookNode*,lpFacebookUser*);
    n_lpFacebookNode* m_new2();
    void mark();
};

// c_enumerator4
class n_lpFacebookEnumerator : public Object{
public:
    n_lpFacebookList* m__list;
    n_lpFacebookNode* m__curr;
    n_lpFacebookEnumerator();
    n_lpFacebookEnumerator* m_new(n_lpFacebookList*);
    n_lpFacebookEnumerator* m_new2();
    bool p_HasNext();
    lpFacebookUser* p_NextObject();
    void mark();
};

// c_list2
class n_lpFacebookList : public Object{
public:
    n_lpFacebookNode* m__head;
    n_lpFacebookList();
    n_lpFacebookList* m_new();
    n_lpFacebookNode* p_AddLast2(lpFacebookUser*);
    n_lpFacebookList* m_new2(Array<lpFacebookUser* >);
    n_lpFacebookEnumerator* p_ObjectEnumerator();
    void mark();
};

// c_HeadNode2
class n_lpFacebookHeadNode : public n_lpFacebookNode{
public:
    n_lpFacebookHeadNode();
    n_lpFacebookHeadNode* m_new();
    void mark();
};

#pragma mark - facebook list implementation

n_lpFacebookNode::n_lpFacebookNode(){
    m__succ=0;
    m__pred=0;
    m__data=0;
}
n_lpFacebookNode* n_lpFacebookNode::m_new(n_lpFacebookNode* t_succ,n_lpFacebookNode* t_pred,lpFacebookUser* t_data){
    gc_assign(m__succ,t_succ);
    gc_assign(m__pred,t_pred);
    gc_assign(m__succ->m__pred,this);
    gc_assign(m__pred->m__succ,this);
    gc_assign(m__data,t_data);
    return this;
}
n_lpFacebookNode* n_lpFacebookNode::m_new2(){
    return this;
}
void n_lpFacebookNode::mark(){
    Object::mark();
    gc_mark_q(m__succ);
    gc_mark_q(m__pred);
    gc_mark_q(m__data);
}


n_lpFacebookEnumerator::n_lpFacebookEnumerator(){
    m__list=0;
    m__curr=0;
}
n_lpFacebookEnumerator* n_lpFacebookEnumerator::m_new(n_lpFacebookList* t_list){
    gc_assign(m__list,t_list);
    gc_assign(m__curr,t_list->m__head->m__succ);
    return this;
}
n_lpFacebookEnumerator* n_lpFacebookEnumerator::m_new2(){
    return this;
}
bool n_lpFacebookEnumerator::p_HasNext(){
    while(m__curr->m__succ->m__pred!=m__curr){
        gc_assign(m__curr,m__curr->m__succ);
    }
    return m__curr!=m__list->m__head;
}
lpFacebookUser* n_lpFacebookEnumerator::p_NextObject(){
    lpFacebookUser* t_data=m__curr->m__data;
    gc_assign(m__curr,m__curr->m__succ);
    return t_data;
}
void n_lpFacebookEnumerator::mark(){
    Object::mark();
    gc_mark_q(m__list);
    gc_mark_q(m__curr);
}



n_lpFacebookList::n_lpFacebookList(){
    m__head=((new n_lpFacebookHeadNode)->m_new());
}
n_lpFacebookList* n_lpFacebookList::m_new(){
    return this;
}
n_lpFacebookNode* n_lpFacebookList::p_AddLast2(lpFacebookUser* t_data){
    return (new n_lpFacebookNode)->m_new(m__head,m__head->m__pred,t_data);
}
n_lpFacebookList* n_lpFacebookList::m_new2(Array<lpFacebookUser* > t_data){
    Array<lpFacebookUser* > t_=t_data;
    int t_2=0;
    while(t_2<t_.Length()){
        lpFacebookUser* t_t=t_[t_2];
        t_2=t_2+1;
        p_AddLast2(t_t);
    }
    return this;
}
n_lpFacebookEnumerator* n_lpFacebookList::p_ObjectEnumerator(){
    return (new n_lpFacebookEnumerator)->m_new(this);
}
void n_lpFacebookList::mark(){
    Object::mark();
    gc_mark_q(m__head);
}


n_lpFacebookHeadNode::n_lpFacebookHeadNode(){
}
n_lpFacebookHeadNode* n_lpFacebookHeadNode::m_new(){
    n_lpFacebookNode::m_new2();
    gc_assign(m__succ,(this));
    gc_assign(m__pred,(this));
    return this;
}
void n_lpFacebookHeadNode::mark(){
    n_lpFacebookNode::mark();
}



#pragma mark - facebook user implementation

class lpFacebookUser:public Object
{
private:
    NSMutableDictionary *sessionUser;
    NSMutableArray *listaAmigos;
public:
    void init( NSMutableDictionary *s );
    String Get( String varname );
    void mark(); // some monkey thing
    void initFriends(NSMutableArray *l);
    n_lpFacebookList *GetFriends();
    lpFacebookUser *GetFriendById(String facebook_id);
};

void lpFacebookUser::init(NSMutableDictionary * s)
{
    this->sessionUser = s;
}

String lpFacebookUser::Get(String varname)
{
    //NSLog ( @"varname : %@", varname.ToNSString());
    @try
    {
        NSString *data = [this->sessionUser objectForKey:varname.ToNSString()];
        return String(data);
    }
    @catch (NSException *exception) {
        // the varname doesn't exist into user
    }
    
    return String(@"");

}

void lpFacebookUser::mark()
{
    // some monkey thing
}

void lpFacebookUser::initFriends(NSMutableArray *l)
{
    this->listaAmigos = l;
}

n_lpFacebookList *lpFacebookUser::GetFriends()
{
    n_lpFacebookList *idAmigos = (new n_lpFacebookList)->m_new();
    
    lpFacebookUser *user_iterator = NULL;
    for (int i = 0; i < [listaAmigos count]; i++)
    {
        user_iterator = (lpFacebookUser*)[listaAmigos objectAtIndex:i];
        idAmigos->p_AddLast2(user_iterator);
    }
    
    return idAmigos;
}

lpFacebookUser *lpFacebookUser::GetFriendById(String facebook_id)
{
    lpFacebookUser *usuario = NULL;
    
    for (int i = 0; i < [this->listaAmigos count]; i++) {
        lpFacebookUser *for_user = (lpFacebookUser*)[this->listaAmigos objectAtIndex:i];
        if ([for_user->Get(String(L"user",4)).ToNSString() isEqualToString:facebook_id.ToNSString()]) {
            usuario = for_user;
        }
    }
    return usuario;
}

class lpFacebookBase:public Object
{
private:
    lpFacebookUser *user;
    FBSession *s;
    NSMutableDictionary *sessionUser;
    NSMutableArray *listaAmigos;
    String APP_ID;
public:
    void Login( String permissions );
    void Logout();
    void PostFeed( String name, String caption, String description, String link, String picture, String message );
    void mark(); // some monkey thing
    void Init( String appid );
    lpFacebookUser *Me();
    bool IsOpened();
};

// implement
void lpFacebookBase::Login(String permissions)
{
    NSArray *wper = [NSArray arrayWithObjects:@"publish_actions", nil];
    NSArray *rper = [NSArray arrayWithObject:@"email"];
    
    // setting default appid
    [FBSettings setDefaultAppID:this->APP_ID.ToNSString()];
    
    // creating session
    this->s = [[FBSession alloc] init];
    
    // set as default
    [FBSession setActiveSession:this->s];
    
    // add login behavior
    NSMutableSet *set = [NSMutableSet setWithSet:[FBSettings loggingBehavior]];
    [set addObject:FBLoggingBehaviorAccessTokens];
    
    [FBSettings setLoggingBehavior:set];
    
    
    // loggin with callback
    
    NSLog(@"%@", [FBSettings loggingBehavior]);
    
    FBSessionStateHandler handler =^(FBSession *session, FBSessionState status, NSError *error)
    {
        NSLog(@"Facebook session status changed - %d - Error : %@", status, error);

        // detect if faceboko session is opened
        if (status == FBSessionStateOpen)
        {
            
            // detect the current state and permissions are compatibles with publish action
            if ([session state] == FBSessionStateOpen && ![[session permissions] containsObject:@"publish_actions"])
            {
                [session requestNewPublishPermissions:wper
                                      defaultAudience:FBSessionDefaultAudienceEveryone
                                    completionHandler:^(FBSession *session, NSError *error){
                                        // nothing here
                                    }];
            }
            
        
            [[FBRequest requestForMe] startWithCompletionHandler:^(FBRequestConnection *connection,
                                         NSDictionary<FBGraphUser> *user,
                                         NSError *error) {
                NSLog(@"user name : %@", user.name);
                
                if (nil != user.name)
                {
                    [this->sessionUser setObject:user.name forKey:@"username"];
                }
            }];
            
            
            [[FBRequest requestForMyFriends] startWithCompletionHandler:^(FBRequestConnection *connection, id result, NSError *error) {
                NSDictionary *resultDictionary = (NSDictionary *)result;
                
                NSArray *data = [resultDictionary objectForKey:@"data"];
                
                NSLog(@"Data:- %@",data);
                
                for (NSDictionary *dic in data) {
                    NSLog(@"ID:- %@",[dic objectForKey:@"id"]);
                }
            }];
        }
    };

    if (![this->s isOpen])
    {
        @try {
            [FBSession openActiveSessionWithReadPermissions:rper
                                               allowLoginUI:YES
                                          completionHandler:handler];
        }
        @catch (NSException *exception) {
            // nothig here
        }
    }
    else
    {
        @try {
            NSLog(@"lp2 : open session");
            [FBSession openActiveSessionWithAllowLoginUI:YES];
        }
        @catch (NSException *exception) {
            // nothig here
        }
    }
}

void lpFacebookBase::Logout()
{
    [[FBSession activeSession] closeAndClearTokenInformation];
    [this->sessionUser removeAllObjects];
}

void lpFacebookBase::PostFeed( String name, String caption, String description, String link, String picture, String message )
{
    if ( nil != [[FBSession activeSession] accessTokenData] )
    {
        NSString *urlString = [NSString stringWithFormat:@"https://graph.facebook.com/me/feed?access_token=%@", [[FBSession activeSession] accessTokenData]];
        NSLog(@"url:%@", urlString);
        
        //NSString *postString = [[NSString alloc] initWithFormat:@"message=%@",caption.ToNSString()];
        NSString *postString = [[NSString alloc] initWithFormat:@"name=%@",name.ToNSString()];
        postString = [postString stringByAppendingFormat:@"&caption=%@", caption.ToNSString()];
        postString = [postString stringByAppendingFormat:@"&description=%@", description.ToNSString()];
        postString = [postString stringByAppendingFormat:@"&link=%@", link.ToNSString()];
        postString = [postString stringByAppendingFormat:@"&picture=%@", picture.ToNSString()];
        postString = [postString stringByAppendingFormat:@"&message=%@", message.ToNSString()];
        // Package the string in an NSData object
        NSData *requestData = [postString dataUsingEncoding:NSASCIIStringEncoding allowLossyConversion:YES];
        
        NSString *postLength = [NSString stringWithFormat:@"%d", [requestData length]];
        
        // Create the URL request
        NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL: [NSURL URLWithString:urlString]];  // create the URL request
        [request setHTTPMethod: @"POST"];   // you're sending POST data
        [request setHTTPBody: requestData];  // apply the post data to be sent
        [request setValue:postLength forHTTPHeaderField:@"Content-Length"];
        [request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];
        
        // Call the URL
        [NSURLConnection sendAsynchronousRequest:request queue:[[NSOperationQueue alloc] init] completionHandler:^(NSURLResponse * response, NSData * data, NSError *error){
            NSLog(@"return: %@", [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding]);
        }];

    }
}

void lpFacebookBase::mark()
{
    // some monkey thing
}


void lpFacebookBase::Init( String appid )
{
    // instantiate friend list
    this->listaAmigos = [[NSMutableArray alloc] init];
    
    // initialize
    this->APP_ID = appid;

    this->sessionUser = [[NSMutableDictionary alloc] init];

    this->user = new lpFacebookUser();
    this->user->init(this->sessionUser);
    this->user->initFriends(this->listaAmigos);
}

lpFacebookUser* lpFacebookBase::Me()
{
    return this->user;
}


bool lpFacebookBase::IsOpened()
{
    return [[FBSession activeSession] isOpen];
}

